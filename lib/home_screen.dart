import 'dart:io';
import 'dart:typed_data';

import 'package:dall_e_image_generator/api_services.dart';
import 'package:dall_e_image_generator/art_collections_page.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';

import 'colors.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  TextEditingController textController = TextEditingController();
  var sizes = ["Small", "Medium", "Large"];
  var values = ["256x256", "512x512", "1024x1024"];
  String? dropValue;
  String image = '';
  var isLoaded = false;

  ScreenshotController screenshotController = ScreenshotController();

  // To download the image and store in Gallery
  downloadImg() async {
    var permission = await Permission.storage.request();

    if (permission.isGranted) {
      final appDocDirectory = (await getApplicationDocumentsDirectory()).path;
      const folderName = 'AI Images';
      final path = Directory("$appDocDirectory/$folderName");

      final filename = "${DateTime.now().millisecondsSinceEpoch}.png";

      if (await path.exists()) {
        await screenshotController.captureAndSave(path.path,
            delay: const Duration(milliseconds: 100),
            fileName: filename,
            pixelRatio: 1.0);

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Downloaded to ${path.path}"),
          ),
        );

      } else {
        await path.create(recursive: true).then((Directory directory) {
          print('Path of New Dir: '+directory.path);
        });
        await screenshotController.captureAndSave(path.path,
            delay: const Duration(milliseconds: 100),
            fileName: filename,
            pixelRatio: 1.0);

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Downloaded to ${path.path}"),
          ),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Please allow permission to access storage"),
        ),
      );
    }
  }

  // Share functionality to share generated image
  shareImage() async {
    await screenshotController
        .capture(delay: const Duration(milliseconds: 100), pixelRatio: 1.0)
        .then((Uint8List? img) async {
      if (img != null) {
        final directory = (await getApplicationDocumentsDirectory()).path;
        const fileName = "share.png";
        final imgPath = await File("$directory/$fileName").create();
        await imgPath.writeAsBytes(img);

        Share.shareXFiles([XFile(imgPath.path)],
            text: "Generated by AI - Ram Devs");
      } else {
        print("Failed to take screenshot ");
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.all(8.0),
                backgroundColor: btnColor,
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => ArtCollectionPage(),
                  ),
                );
              },
              child: const Text("My Art"),
            ),
          ),
        ],
        centerTitle: true,
        title: const Text(
          "AI Image Generator",
          style: TextStyle(
            fontFamily: 'Poppins',
            color: whiteColor,
          ),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            Expanded(
                child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        height: 45,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 4),
                        decoration: BoxDecoration(
                          color: whiteColor,
                          borderRadius: BorderRadius.circular(15),
                        ),
                        child: TextFormField(
                          controller: textController,
                          maxLines: 1,
                          decoration: const InputDecoration(
                            hintText: "eg 'A monkey on moon'",
                            border: InputBorder.none,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Container(
                      height: 44,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 5, vertical: 3),
                      decoration: BoxDecoration(
                        color: whiteColor,
                        borderRadius: BorderRadius.circular(15),
                      ),
                      child: DropdownButtonHideUnderline(
                        child: DropdownButton(
                          icon: const Icon(Icons.expand_more, color: btnColor),
                          value: dropValue,
                          hint: const Text("Select Size"),
                          items: List.generate(
                            sizes.length,
                            (index) => DropdownMenuItem(
                              value: values[index],
                              child: Text(sizes[index]),
                            ),
                          ),
                          onChanged: (value) {
                            setState(() {
                              dropValue = value.toString();
                            });
                          },
                        ),
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  width: 300,
                  height: 44,
                  child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: btnColor,
                      shape: const StadiumBorder(),
                    ),
                    onPressed: () async {
                      if (textController.text.isNotEmpty &&
                          dropValue!.isNotEmpty) {
                        setState(() {
                          isLoaded = false;
                        });

                        image = await ApiService.generateImage(
                            textController.text, dropValue!);
                        setState(() {
                          isLoaded = true;
                        });
                      } else {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text("Please pass the query and size"),
                          ),
                        );
                      }
                    },
                    child: const Text("Generate"),
                  ),
                ),
              ],
            )),
            Expanded(
              flex: 4,
              child: isLoaded
                  ? Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Container(
                          clipBehavior: Clip.antiAlias,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Screenshot(
                            controller: screenshotController,
                            child: Image.network(
                              image,
                              fit: BoxFit.contain,
                            ),
                          ),
                        ),
                        const SizedBox(height: 15),
                        Row(
                          children: [
                            Expanded(
                              child: ElevatedButton.icon(
                                icon: const Icon(
                                    Icons.download_for_offline_rounded),
                                style: ElevatedButton.styleFrom(
                                  padding: const EdgeInsets.all(8.0),
                                  backgroundColor: btnColor,
                                ),
                                onPressed: () {
                                  downloadImg();
                                },
                                label: const Text("Download"),
                              ),
                            ),
                            const SizedBox(width: 12),
                            ElevatedButton.icon(
                              icon: const Icon(Icons.share),
                              style: ElevatedButton.styleFrom(
                                padding: const EdgeInsets.all(8.0),
                                backgroundColor: btnColor,
                              ),
                              onPressed: () async {
                                await shareImage();
                              },
                              label: const Text("Share"),
                            ),
                          ],
                        ),
                      ],
                    )
                  : Container(
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(15),
                        color: whiteColor,
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Image.asset(
                            'assets/loader.gif',
                            height: 100,
                            width: 100,
                          ),
                          const SizedBox(height: 12),
                          const Text(
                            "Waiting for image to be generated....",
                            style: TextStyle(
                              fontSize: 16,
                            ),
                          ),
                        ],
                      ),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}
